What happens when you initialize a repository? Why do you need to do it?

- Creates a hidden git directory in my repository which will contain git metadata
- This is required in order to start creating git commits for my project and have version control

How is the staging area different from the working directory and the repository?

- Staging area is an intermediary between working directory and repository

What value do you think it offers?

- Allows me to add and remove files before committing them

How can you use the staging area to make sure you have one commit per logical change?

- By running git diff with no arguments so I can see the changes I have made between the staging area and the working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- When making experimental features in my project or making a different version of it (such as a Spanish version).
- Branches help as when my experimental feature or my different version is complete I can then merge it back with the master branch.

How do the diagrams help you visualize the branch structure?

- They allow me to see visually how a branch structure is laid out and what commits are on which branches.
- They also allow me to see which commit each branch has branched off of the master branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- The result of merging two branches together is adding any new code from the branch that is merging into the other as well as removing any code that was removed and keeping any code that was untouched.
- It is represented in the diagram this way to show that all commits from both branches will be shown in the log interleaved.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic pros:

- Saves time by merging two files and adding and deleting any changes
- No room for human error by manually merging two files

Cons:

- Any conflicts between the two commits cannot be resolved automatically, it requires human input to decide which code to keep and which code to discard

Manual pros:

- Merging two files with conflicts can be resolved by figuring out which is the right code to keep and which code should be discarded

Cons:

- Takes longer than automatically
- Creates room for human error
