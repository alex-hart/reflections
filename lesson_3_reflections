When would you want to use a remote repository rather than keeping all your work local?

- When collaborating with other people on a project
- When I will be working from different workstations, e.g. from home and from an office
- When I want to backup my work

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

- Because any new changes pulled from GitHub manually may interfere with whatever I am working on from my local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

- A fork is when I have a copy of somebody's repository on GitHub which I can push and pull to myself but still references the original repository. This is when I want to work on somebody's work on my local workstation.
- A clone is when I directly copy a repository from GitHub onto my local workstation, this is when I want to copy my own personal work onto a workstation.
- A branch is when I want to work on a repository and make experimental changes.

What is the benefit of having a copy of the last known state of the remote stored locally?

- I can merge this copy with my local repository before pushing it to GitHub.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

- You could collaborate by using other file sharing services such as Google Drive and Dropbox or through USB sticks.
- Google Drive and Dropbox would be easier to share files as the process is to just upload your file.
- However, it would be much harder to keep track of changes without pull requests and commit history. You also cannot fork projects.
- Using USB would be very easy as you just upload it to the USB and pass it to a coworker.
- This would be hard though if the coworker is not anywhere in my office, it also suffers from the same problems as Dropbox and Google Drive.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

- When making experimental changes that may affect the master branch.
- Also when trying to separate a working progress version of a project as opposed to the public working project which would be master.
- Making changes in master branch is best done for bug fixes or minor changes that won't break the project.
- Making changes in a separate branch is best used for making experimental features/changes or trying to fix larger bugs.
- Making changes in a separate branch is also best used for collaborative projects as I can make my changes and then add them to the master branch.
- This allows other people to simultaneously work on changes in their own branches.
- Then when change branches are merged they can either be merged instantly in a pull request if there are no conflicts or resolved if there is a conflict.
